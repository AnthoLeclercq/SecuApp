import nmap
import threading
from services.base_service import BaseService
from utils.report_generator import ReportGenerator

report_generator = ReportGenerator()

class VulnerabilityService(BaseService):
    def __init__(self):
        super().__init__()        
        self.analysis_lock = threading.Lock()

    def scan(self, hostname):
        with self.analysis_lock:
            if self.progress is not None:
                return {'error': 'An analysis of vulnerability is already in progress'}
            self._set_progress(0)
            
        results = self.service_logique(hostname)
                   
        self._set_progress(None)
        if(len(results)>0):
            report_generator.generate_report(results, 'csv', 'vulnerabilite')
            report_generator.generate_report(results, 'pdf', 'vulnerabilite')

        return results

    def service_logique(self, hostname):
        scanner = nmap.PortScanner()
        self.progress = 25

        scanner.scan(hostname, arguments='-sV --script vulners')
        self.progress = 75

        vulnerabilities = []
        for host in scanner.all_hosts():
            if 'vulners' in scanner[host]:
                for result in scanner[host]['vulners']:
                    vulnerability = {
                        'Host': host,
                        'Vulnerability': result['id'],
                        'Summary': result['summary'],
                        'CVSS': result['cvss']
                    }
                    vulnerabilities.append(vulnerability)

        return vulnerabilities